/*
 * Fortishield Vulnerability scanner
 * Copyright (C) 2015, Fortishield Inc.
 * May 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _FACTORY_ORCHESTRATOR_HPP
#define _FACTORY_ORCHESTRATOR_HPP

#include "chainOfResponsability.hpp"
#include "detailsAugmentation.hpp"
#include "inventorySync.hpp"
#include "osScanner.hpp"
#include "packageScanner.hpp"
#include "resultIndexer.hpp"
#include "sendReport.hpp"
#include "socketClient.hpp"
#include <iostream>
#include <memory>

/**
 * @brief FactoryOrchestrator class.
 *
 */
template<typename TPackageScanner = PackageScanner,
         typename TDetailsAugmentation = DetailsAugmentation,
         typename TOsScanner = OsScanner,
         typename TInventorySync = InventorySync,
         typename TSendReport = SendReport,
         typename TResultIndexer = ResultIndexer,
         typename TDatabaseFeedManager = DatabaseFeedManager,
         typename TIndexerConnector = IndexerConnector,
         typename TScanContext = ScanContext>
class TFactoryOrchestrator final
{
private:
    TFactoryOrchestrator() = default;

public:
    /**
     * @brief Creates an orchestrator and returns it.
     *
     * @param type Scanner type.
     * @param databaseFeedManager DatabaseFeedManager object.
     * @param indexerConnector Indexer connector object.
     * @param inventoryDatabase Inventory database.
     * @param reportDispatcher Report dispatcher queue to send vulnerability reports.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    static std::shared_ptr<AbstractHandler<std::shared_ptr<TScanContext>>>
    create(ScannerType type,
           std::shared_ptr<TDatabaseFeedManager> databaseFeedManager,
           std::shared_ptr<TIndexerConnector> indexerConnector,
           Utils::RocksDBWrapper& inventoryDatabase,
           std::shared_ptr<ReportDispatcher> reportDispatcher)
    {
        std::shared_ptr<AbstractHandler<std::shared_ptr<TScanContext>>> orchestration;
        if (type == ScannerType::PackageInsert)
        {
            orchestration = std::make_shared<TPackageScanner>(databaseFeedManager);
            orchestration->setLast(std::make_shared<TDetailsAugmentation>(databaseFeedManager));
        }
        else if (type == ScannerType::PackageDelete)
        {
        }
        else if (type == ScannerType::HotfixInsert)
        {
            // orchestration = std::make_shared<HotfixScanner>();
        }
        else if (type == ScannerType::HotfixDelete)
        {
            // orchestration = std::make_shared<DeleteHotfixVulnerabilities>();
        }
        else if (type == ScannerType::Os)
        {
            orchestration = std::make_shared<TOsScanner>();
            // orchestration->setLast(std::make_shared<CheckRemediations>());
        }
        else if (type == ScannerType::IntegrityClear)
        {
            // orchestration = std::make_shared<VulnerabilityCleanupController>();
        }
        else
        {
            throw std::runtime_error("Invalid scanner type");
        }

        if (orchestration == nullptr)
        {
            orchestration = std::make_shared<TInventorySync>(inventoryDatabase);
        }
        else
        {
            orchestration->setLast(std::make_shared<TInventorySync>(inventoryDatabase));
        }

        if (type == ScannerType::PackageDelete || type == ScannerType::IntegrityClear)
        {
            orchestration->setLast(std::make_shared<TDetailsAugmentation>(databaseFeedManager));
        }

        orchestration->setLast(std::make_shared<TSendReport>(reportDispatcher));
        orchestration->setLast(std::make_shared<TResultIndexer>(indexerConnector));

        return orchestration;
    }
};

using FactoryOrchestrator = TFactoryOrchestrator<>;

#endif // _FACTORY_ORCHESTRATOR_HPP
